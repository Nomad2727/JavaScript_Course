/*
   Можно благодаря замыканию и использовав сеттеры-геттеры симитировав "защищенные" свойства,
   тем самым ограничить доступ к критичным функциям-настройкам, например, задать рамки для скорости,
   или оставить какие-то настройки только для чтения (счетчик счета), 
   отдав в геттер свойство с закрепленным при создании занчением.
*/


if (!("a" in window)) {
    var a = 1;
}
alert(a);

/* undefined
   var игнорирует блоки, поэтому переменная станет глобальной,
   и будет создана в глобально области видимости ещё в начале выполнения скрипта.
   И, соответственно, значение ей присвоено не будет,
   т.к. условие отсутствия переменной в window не выполнится
*/

var b = function a(x) {
    x && a(--x);
};
alert(a);

/* error
   В выводе речь идёт о получении значения переменной 'a',
   но переменная с таким именем даже объявлена не была.
   В окружении только переменная 'b', в которой положена функция с именем 'a'
*/

function a(x) {
    return x * 2;
}
var a;
alert(a);

/* function a(x) {return x * 2;}
   var дало 'a' возможность быть объявленной в самом начале.
   Далее функция определила значение 'a' (дав имя 'a').
   Но результат не вернёт, т.е. функция не отработает,
   т.к. в выводе не было указания на это постановкой скобок - a(аргумент)
*/

function b(x, y, a) {
    arguments[2] = 10;
    alert(a);
}
b(1, 2, 3);

/* 10
   Объявляется функция с именем 'b', происходит её вызов с передачей аргументов.
   Для параметров функции записываются соответствующие значения и они итерируемы.
   Поэтому есть возможность обратиться к ним по индексу с целью замены значения.
   Далее вывод сможет получить значение параметра-переменной 'a',
   т.к. вызывается в локальном окружении.
   Получить значение в глобальном окружении не вышло бы 
*/

function a() {
    alert(this);
}
a.call(null);

/* объект window
   .call должен бы был привязать какой-либо объекта к функции 'a' - для контекста для this.
   Но в данном случаем объект не был передан, a.call(null) = a.call(). 
   Следовательно this вывелся по умолчанию, привязанным к window
*/